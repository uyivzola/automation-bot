import os
from datetime import datetime

import pandas as pd
from dotenv import load_dotenv
from sqlalchemy import create_engine

from reports.formatter import formatter


def top_generator():
    print('Started running top generator')
    env_file_path = 'D:/Projects/.env'
    load_dotenv(env_file_path)

    # Get today's date
    today_date = datetime.now().strftime('%d %b')
    promotion_path = r'D:\Projects\promotion.xlsx'
    output_file_path_x = f'TOP ostatok - {today_date}.xlsx'
    projects_df = pd.read_excel(promotion_path, sheet_name='Projects')
    corporative_products_path = f'TOP ostatok - NIKA  - {today_date}.xlsx'
    ots_file_path = f'TOP ostatok - OTS Project - {today_date}.xlsx'
    # Access the environment variables
    db_server = os.getenv("DB_SERVER")
    db_database = os.getenv("DB_DATABASE_SERGELI")
    db_user = os.getenv("DB_USER")
    db_password = os.getenv("DB_PASSWORD")
    db_port = os.getenv("DB_PORT")
    db_driver_name = os.getenv("DB_DRIVER_NAME")

    # Construct the connection string
    conn_str = f"mssql+pyodbc://{db_user}:{db_password}@{db_server}:{db_port}/{db_database}?driver={db_driver_name}"

    procedure_name = "bGoodByIncome_Dilshod"
    engine = create_engine(conn_str)

    # Build the SQL query with parameterized query
    sql_query = f"""
    EXEC {procedure_name}
    """

    # üíÄüíÄüíÄ EXECUTION!!! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
    result_df = pd.read_sql_query(sql_query, engine)

    # Rename columns
    result_df.columns = ['–ö–æ–º–ø–∞–Ω–∏—è', '–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–°–µ—Ä–∏—è', '–°–∫–ª–∞–¥', '–°—É–±—Å–∫–ª–∞–¥',
                         '–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞', '–î–Ω–µ–π –¥–æ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω.', '–ü.–¶–µ–Ω–∞', '–ü.–ö–æ–ª-–≤–æ', '–ù–∞ –±—Ä–æ–Ω–∏', '–°–≤–æ–±. –û—Å—Ç–∞—Ç–æ–∫',
                         'Selling Price']
    # Only "–ê—Å–∫–ª–µ–ø–∏–π" data!!!
    result_df = result_df[result_df['–ö–æ–º–ø–∞–Ω–∏—è'] == '–ê—Å–∫–ª–µ–ø–∏–π']

    # Strip unnecessary spaces in '–¢–æ–≤–∞—Ä' column
    result_df['–¢–æ–≤–∞—Ä'] = result_df['–¢–æ–≤–∞—Ä'].str.strip()
    result_df['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'] = result_df['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'].str.strip()

    # Add new columns #UNIVERSAL ONE
    result_df['–æ—Å—Ç–∞—Ç–æ–∫'] = result_df['–ù–∞ –±—Ä–æ–Ω–∏'] + result_df['–°–≤–æ–±. –û—Å—Ç–∞—Ç–æ–∫']
    result_df['—Å—É–º–º–∞'] = result_df['–ü.–¶–µ–Ω–∞'] * result_df['–æ—Å—Ç–∞—Ç–æ–∫']

    # Group by '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å' and '–¢–æ–≤–∞—Ä' and aggregate the sums
    pivoted_df = result_df.groupby(['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–¢–æ–≤–∞—Ä']).agg({'–æ—Å—Ç–∞—Ç–æ–∫': 'sum', '—Å—É–º–º–∞': 'sum'}).reset_index()

    # Sort the DataFrame by 'Sum of —Å—É–º–º–∞' in descending order
    df = pivoted_df.sort_values(by='—Å—É–º–º–∞', ascending=False)

    # special for Xikmat
    manufacturers = ["Ever neuro pharma", "–†–æ–º—Ñ–∞—Ä–º –ö–æ–º–ø–∞–Ω–∏–∏ - –†—É–º—ã–Ω–∏—è", "–†–æ–º—Ñ–∞—Ä–º –ö–æ–º–ø/World Medicine"]
    corporate_manufacturers = ['Nika-Pharm',
                               '–¢–ù–ö –°–∏–ª–º–∞ /–†–æ—Å—Å–∏—è',
                               '–§–ª—É–º–µ–¥-–§–∞—Ä–º –û–û–û/–ú–æ–ª–¥–æ–≤–∞/',
                               '–ú–∏–Ω—Å–∫–∏–Ω—Ç–µ—Ä–∫–∞–ø—Å',
                               'Selo Medical –ê–≤—Å—Ç—Ä–∏—è',
                               '–†–æ—Ö—Ç–æ –§–∞—Ä–º–∞—Å—å—é—Ç–∏–∫–∞–ª']

    corporative_products = result_df[result_df['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'].isin(corporate_manufacturers)]
    corporative_products = corporative_products.groupby(['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–¢–æ–≤–∞—Ä', 'Selling Price']).agg(
        {'–æ—Å—Ç–∞—Ç–æ–∫': 'sum', '—Å—É–º–º–∞': 'sum'}).reset_index()

    corporative_products.sort_values(by='—Å—É–º–º–∞', ascending=False, inplace=True)

    df.to_excel(output_file_path_x, index=False)
    corporative_products.to_excel(corporative_products_path, index=False)
    # ots_df.to_excel(ots_file_path, index=False)
    formatter(df, output_file_path_x)
    formatter(corporative_products, corporative_products_path)

    for project in projects_df['ProjectName'].unique():
        for project_name in projects_df['ProjectName'].unique():
            project_filtered_df = result_df[
                result_df['–¢–æ–≤–∞—Ä'].isin(projects_df[projects_df['ProjectName'] == project_name]['GoodName'])]
            project_filtered_df = project_filtered_df.groupby(['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–¢–æ–≤–∞—Ä', 'Selling Price']).agg(
                {'–æ—Å—Ç–∞—Ç–æ–∫': 'sum', '—Å—É–º–º–∞': 'sum'}).reset_index()
            output_file_path = f'TOP ostatok - {project_name} - {today_date}.xlsx'
            project_filtered_df.to_excel(output_file_path, index=False)
            formatter(project_filtered_df, output_file_path)
